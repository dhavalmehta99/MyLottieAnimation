# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  
  
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["APPCONNECT_API_KEY_ID"],
      issuer_id: ENV["APPCONNECT_API_ISSUER"],
      key_content: ENV["APPCONNECT_API_KEY_PRIVATE"],
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
  #fetch read your app identifier defined in your Appfile
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
  current_version = get_version_number(
    target: "main-target" # replace with your main target, required if you have more than one non-test target
  )
  latest_build_number = latest_testflight_build_number(
    api_key: api_key,
    version: current_version,
    app_identifier: app_identifier
  )
  increment_build_number(
    build_number: (latest_build_number + 1),
  )
  end

  desc "Check certs and profiles"
  lane :prepare_signing do |options|
  app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
  profile_name = "App Provisioning Profile" # replace with the name of your existing profile, or define a name for the profile that fastlane will create if it’s not found
  
  cert(
      api_key: api_key,
      keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
    )
  
  # main app profile
  sigh(
    api_key: api_key,
    app_identifier: app_id,
    provisioning_name: profile_name,
    force: true # always recreate this exact profile to ensure it's valid and not expired
  )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  
  profile_name = "App Provisioning Profile" # the name of the profile to use for the build
  output_name = "lottieAnimationDemo-iOS-release" # specify the name of the .ipa file to generate
  export_method = "app-store" # specify the export method
  compile_bitcode = true # specify whether to enable bitcode
  
  # turn off automatic signing during build so correct code signing identity is guaranteed to be used
  update_code_signing_settings(
    use_automatic_signing: false,
    targets: ["main-target"], # specify which targets to update code signing settings for
    code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
    bundle_identifier: app_identifier,
    profile_name: profile_name,
    build_configurations: ["Release"] # only toggle code signing settings for Release configurations
  )
  
  # build the app
  gym(
    scheme: "LottiAnimationDemo", # replace with name of your project’s scheme
    output_name: output_name,
    configuration: "Release",
    export_options: {
      method: export_method,
      provisioningProfiles: {
        app_identifier => app_profile_name
      },
      compileBitcode: compile_bitcode
    }
  )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
  deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false # not supported through ASC API yet
  )
  end

  desc "Build and upload to TestFlight"
   lane :build_upload_testflight do
     load_asc_api_key
     prepare_signing
     fetch_and_increment_build_number
     build_release
     upload_release
   end

  # desc "Build for ios"
  # lane :build do |options|
  #   # Create a custom keychain for code signing
  #   create_keychain(
  #     name: 'keychain',
  #     password: 'password',
  #     default_keychain: true,
  #     unlock: true,
  #     timeout: 3600,
  #     add_to_search_list: true
  #   )

  #   match(
  #     storage_mode: 'git',
  #     type: "appstore",
  #     keychain_name: 'keychain',
  #     keychain_password: 'password',
  #     readonly: true,
  #     git_url: 'https/github/url' ## where secrets is hosted.
  #   )

  #   # Building the iOS app
  #   gym(
  #     workspace: "./LottieAnimationDemo.xcworkspace",
  #     include_bitcode: true,
  #     include_symbols: true,
  #     silent: true,
  #     clean: true,
  #     scheme: "LottieAnimationDemo",
  #     export_method: "app-store"
  #   )
  # end

  # desc "Upload to testflight"
  # lane :testflight_release_to_app_store do |options|
  #   build
  #   upload_to_testflight(
  #     skip_submission: true,
  #     skip_waiting_for_build_processing: true
  #   )
  # end

  # desc "Upload to production"
  # lane :production_release_to_app_store do |options|
  #   build
  #   upload_to_app_store(
  #     skip_screenshots: true,
  #     skip_metadata: true
  #   )
  # end
  
  
  # desc "Push a new beta build to TestFlight"
  # lane :beta do
  #   increment_build_number(xcodeproj: "LottieAnimationDemo.xcodeproj")
  #   build_app(workspace: "LottieAnimationDemo.xcworkspace", scheme: "LottieAnimationDemo")
  #   upload_to_testflight
  # end
end
